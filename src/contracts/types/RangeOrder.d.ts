/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RangeOrderInterface extends ethers.utils.Interface {
  functions: {
    "WETH9()": FunctionFragment;
    "cancelRangeOrder(uint256,(address,bool,bool,int24,uint256,uint256,address,uint256))": FunctionFragment;
    "eject()": FunctionFragment;
    "ejectResolver()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "setRangeOrder((address,bool,bool,int24,uint256,uint256,address,uint256))": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "WETH9", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelRangeOrder",
    values: [
      BigNumberish,
      {
        pool: string;
        zeroForOne: boolean;
        ejectDust: boolean;
        tickThreshold: BigNumberish;
        amountIn: BigNumberish;
        minAmountOut: BigNumberish;
        receiver: string;
        maxFeeAmount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "eject", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ejectResolver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRangeOrder",
    values: [
      {
        pool: string;
        zeroForOne: boolean;
        ejectDust: boolean;
        tickThreshold: BigNumberish;
        amountIn: BigNumberish;
        minAmountOut: BigNumberish;
        receiver: string;
        maxFeeAmount: BigNumberish;
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "WETH9", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelRangeOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eject", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ejectResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRangeOrder",
    data: BytesLike
  ): Result;

  events: {
    "LogSetRangeOrder(uint256,address,address,address,uint24,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogSetRangeOrder"): EventFragment;
}

export type LogSetRangeOrderEvent = TypedEvent<
  [BigNumber, string, string, string, number, BigNumber, string] & {
    tokenId: BigNumber;
    pool: string;
    token0: string;
    token1: string;
    fee: number;
    amountIn: BigNumber;
    creator: string;
  }
>;

export class RangeOrder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RangeOrderInterface;

  functions: {
    WETH9(overrides?: CallOverrides): Promise<[string]>;

    cancelRangeOrder(
      tokenId_: BigNumberish,
      params_: {
        pool: string;
        zeroForOne: boolean;
        ejectDust: boolean;
        tickThreshold: BigNumberish;
        amountIn: BigNumberish;
        minAmountOut: BigNumberish;
        receiver: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    eject(overrides?: CallOverrides): Promise<[string]>;

    ejectResolver(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setRangeOrder(
      params_: {
        pool: string;
        zeroForOne: boolean;
        ejectDust: boolean;
        tickThreshold: BigNumberish;
        amountIn: BigNumberish;
        minAmountOut: BigNumberish;
        receiver: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  WETH9(overrides?: CallOverrides): Promise<string>;

  cancelRangeOrder(
    tokenId_: BigNumberish,
    params_: {
      pool: string;
      zeroForOne: boolean;
      ejectDust: boolean;
      tickThreshold: BigNumberish;
      amountIn: BigNumberish;
      minAmountOut: BigNumberish;
      receiver: string;
      maxFeeAmount: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  eject(overrides?: CallOverrides): Promise<string>;

  ejectResolver(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  setRangeOrder(
    params_: {
      pool: string;
      zeroForOne: boolean;
      ejectDust: boolean;
      tickThreshold: BigNumberish;
      amountIn: BigNumberish;
      minAmountOut: BigNumberish;
      receiver: string;
      maxFeeAmount: BigNumberish;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH9(overrides?: CallOverrides): Promise<string>;

    cancelRangeOrder(
      tokenId_: BigNumberish,
      params_: {
        pool: string;
        zeroForOne: boolean;
        ejectDust: boolean;
        tickThreshold: BigNumberish;
        amountIn: BigNumberish;
        minAmountOut: BigNumberish;
        receiver: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    eject(overrides?: CallOverrides): Promise<string>;

    ejectResolver(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    setRangeOrder(
      params_: {
        pool: string;
        zeroForOne: boolean;
        ejectDust: boolean;
        tickThreshold: BigNumberish;
        amountIn: BigNumberish;
        minAmountOut: BigNumberish;
        receiver: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogSetRangeOrder(uint256,address,address,address,uint24,uint256,address)"(
      tokenId?: BigNumberish | null,
      pool?: null,
      token0?: null,
      token1?: null,
      fee?: null,
      amountIn?: null,
      creator?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, number, BigNumber, string],
      {
        tokenId: BigNumber;
        pool: string;
        token0: string;
        token1: string;
        fee: number;
        amountIn: BigNumber;
        creator: string;
      }
    >;

    LogSetRangeOrder(
      tokenId?: BigNumberish | null,
      pool?: null,
      token0?: null,
      token1?: null,
      fee?: null,
      amountIn?: null,
      creator?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string, number, BigNumber, string],
      {
        tokenId: BigNumber;
        pool: string;
        token0: string;
        token1: string;
        fee: number;
        amountIn: BigNumber;
        creator: string;
      }
    >;
  };

  estimateGas: {
    WETH9(overrides?: CallOverrides): Promise<BigNumber>;

    cancelRangeOrder(
      tokenId_: BigNumberish,
      params_: {
        pool: string;
        zeroForOne: boolean;
        ejectDust: boolean;
        tickThreshold: BigNumberish;
        amountIn: BigNumberish;
        minAmountOut: BigNumberish;
        receiver: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    eject(overrides?: CallOverrides): Promise<BigNumber>;

    ejectResolver(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRangeOrder(
      params_: {
        pool: string;
        zeroForOne: boolean;
        ejectDust: boolean;
        tickThreshold: BigNumberish;
        amountIn: BigNumberish;
        minAmountOut: BigNumberish;
        receiver: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH9(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelRangeOrder(
      tokenId_: BigNumberish,
      params_: {
        pool: string;
        zeroForOne: boolean;
        ejectDust: boolean;
        tickThreshold: BigNumberish;
        amountIn: BigNumberish;
        minAmountOut: BigNumberish;
        receiver: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    eject(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ejectResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRangeOrder(
      params_: {
        pool: string;
        zeroForOne: boolean;
        ejectDust: boolean;
        tickThreshold: BigNumberish;
        amountIn: BigNumberish;
        minAmountOut: BigNumberish;
        receiver: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
