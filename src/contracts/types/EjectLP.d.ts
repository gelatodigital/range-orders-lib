/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface EjectLPInterface extends ethers.utils.Interface {
  functions: {
    "canEject(uint256,(int24,bool,bool,uint256,uint256,address,address,uint256),address)": FunctionFragment;
    "cancel(uint256,(int24,bool,bool,uint256,uint256,address,address,uint256))": FunctionFragment;
    "eject(uint256,(int24,bool,bool,uint256,uint256,address,address,uint256))": FunctionFragment;
    "hashById(uint256)": FunctionFragment;
    "nftPositions()": FunctionFragment;
    "pokeMe()": FunctionFragment;
    "schedule((uint256,int24,bool,bool,uint256,uint256,address,address,address,uint256))": FunctionFragment;
    "taskById(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canEject",
    values: [
      BigNumberish,
      {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [
      BigNumberish,
      {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eject",
    values: [
      BigNumberish,
      {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nftPositions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pokeMe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "schedule",
    values: [
      {
        tokenId: BigNumberish;
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        feeToken: string;
        resolver: string;
        maxFeeAmount: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "taskById",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "canEject", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eject", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashById", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nftPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pokeMe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "schedule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taskById", data: BytesLike): Result;

  events: {
    "LogCancelEject(uint256)": EventFragment;
    "LogEject(uint256,uint256,uint256,uint256)": EventFragment;
    "LogSetEject(uint256,tuple,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogCancelEject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogEject"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogSetEject"): EventFragment;
}

export type LogCancelEjectEvent = TypedEvent<
  [BigNumber] & { tokenId: BigNumber }
>;

export type LogEjectEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    tokenId: BigNumber;
    amount0Out: BigNumber;
    amount1Out: BigNumber;
    feeAmount: BigNumber;
  }
>;

export type LogSetEjectEvent = TypedEvent<
  [
    BigNumber,
    [
      BigNumber,
      number,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      BigNumber
    ] & {
      tokenId: BigNumber;
      tickThreshold: number;
      ejectAbove: boolean;
      ejectDust: boolean;
      amount0Min: BigNumber;
      amount1Min: BigNumber;
      receiver: string;
      feeToken: string;
      resolver: string;
      maxFeeAmount: BigNumber;
    },
    string
  ] & {
    tokenId: BigNumber;
    orderParams: [
      BigNumber,
      number,
      boolean,
      boolean,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      BigNumber
    ] & {
      tokenId: BigNumber;
      tickThreshold: number;
      ejectAbove: boolean;
      ejectDust: boolean;
      amount0Min: BigNumber;
      amount1Min: BigNumber;
      receiver: string;
      feeToken: string;
      resolver: string;
      maxFeeAmount: BigNumber;
    };
    sender: string;
  }
>;

export class EjectLP extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: EjectLPInterface;

  functions: {
    canEject(
      tokenId_: BigNumberish,
      order_: {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      },
      feeToken_: string,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    cancel(
      tokenId_: BigNumberish,
      order_: {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    eject(
      tokenId_: BigNumberish,
      order_: {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hashById(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    nftPositions(overrides?: CallOverrides): Promise<[string]>;

    pokeMe(overrides?: CallOverrides): Promise<[string]>;

    schedule(
      orderParams_: {
        tokenId: BigNumberish;
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        feeToken: string;
        resolver: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    taskById(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  canEject(
    tokenId_: BigNumberish,
    order_: {
      tickThreshold: BigNumberish;
      ejectAbove: boolean;
      ejectDust: boolean;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      receiver: string;
      owner: string;
      maxFeeAmount: BigNumberish;
    },
    feeToken_: string,
    overrides?: CallOverrides
  ): Promise<[string, string, BigNumber]>;

  cancel(
    tokenId_: BigNumberish,
    order_: {
      tickThreshold: BigNumberish;
      ejectAbove: boolean;
      ejectDust: boolean;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      receiver: string;
      owner: string;
      maxFeeAmount: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  eject(
    tokenId_: BigNumberish,
    order_: {
      tickThreshold: BigNumberish;
      ejectAbove: boolean;
      ejectDust: boolean;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      receiver: string;
      owner: string;
      maxFeeAmount: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hashById(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  nftPositions(overrides?: CallOverrides): Promise<string>;

  pokeMe(overrides?: CallOverrides): Promise<string>;

  schedule(
    orderParams_: {
      tokenId: BigNumberish;
      tickThreshold: BigNumberish;
      ejectAbove: boolean;
      ejectDust: boolean;
      amount0Min: BigNumberish;
      amount1Min: BigNumberish;
      receiver: string;
      feeToken: string;
      resolver: string;
      maxFeeAmount: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  taskById(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    canEject(
      tokenId_: BigNumberish,
      order_: {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      },
      feeToken_: string,
      overrides?: CallOverrides
    ): Promise<[string, string, BigNumber]>;

    cancel(
      tokenId_: BigNumberish,
      order_: {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    eject(
      tokenId_: BigNumberish,
      order_: {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    hashById(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    nftPositions(overrides?: CallOverrides): Promise<string>;

    pokeMe(overrides?: CallOverrides): Promise<string>;

    schedule(
      orderParams_: {
        tokenId: BigNumberish;
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        feeToken: string;
        resolver: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    taskById(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "LogCancelEject(uint256)"(
      tokenId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;

    LogCancelEject(
      tokenId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { tokenId: BigNumber }>;

    "LogEject(uint256,uint256,uint256,uint256)"(
      tokenId?: BigNumberish | null,
      amount0Out?: null,
      amount1Out?: null,
      feeAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        tokenId: BigNumber;
        amount0Out: BigNumber;
        amount1Out: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    LogEject(
      tokenId?: BigNumberish | null,
      amount0Out?: null,
      amount1Out?: null,
      feeAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        tokenId: BigNumber;
        amount0Out: BigNumber;
        amount1Out: BigNumber;
        feeAmount: BigNumber;
      }
    >;

    "LogSetEject(uint256,tuple,address)"(
      tokenId?: BigNumberish | null,
      orderParams?: {
        tokenId: BigNumberish;
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        feeToken: string;
        resolver: string;
        maxFeeAmount: BigNumberish;
      } | null,
      sender?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          BigNumber,
          number,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          BigNumber
        ] & {
          tokenId: BigNumber;
          tickThreshold: number;
          ejectAbove: boolean;
          ejectDust: boolean;
          amount0Min: BigNumber;
          amount1Min: BigNumber;
          receiver: string;
          feeToken: string;
          resolver: string;
          maxFeeAmount: BigNumber;
        },
        string
      ],
      {
        tokenId: BigNumber;
        orderParams: [
          BigNumber,
          number,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          BigNumber
        ] & {
          tokenId: BigNumber;
          tickThreshold: number;
          ejectAbove: boolean;
          ejectDust: boolean;
          amount0Min: BigNumber;
          amount1Min: BigNumber;
          receiver: string;
          feeToken: string;
          resolver: string;
          maxFeeAmount: BigNumber;
        };
        sender: string;
      }
    >;

    LogSetEject(
      tokenId?: BigNumberish | null,
      orderParams?: {
        tokenId: BigNumberish;
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        feeToken: string;
        resolver: string;
        maxFeeAmount: BigNumberish;
      } | null,
      sender?: null
    ): TypedEventFilter<
      [
        BigNumber,
        [
          BigNumber,
          number,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          BigNumber
        ] & {
          tokenId: BigNumber;
          tickThreshold: number;
          ejectAbove: boolean;
          ejectDust: boolean;
          amount0Min: BigNumber;
          amount1Min: BigNumber;
          receiver: string;
          feeToken: string;
          resolver: string;
          maxFeeAmount: BigNumber;
        },
        string
      ],
      {
        tokenId: BigNumber;
        orderParams: [
          BigNumber,
          number,
          boolean,
          boolean,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          BigNumber
        ] & {
          tokenId: BigNumber;
          tickThreshold: number;
          ejectAbove: boolean;
          ejectDust: boolean;
          amount0Min: BigNumber;
          amount1Min: BigNumber;
          receiver: string;
          feeToken: string;
          resolver: string;
          maxFeeAmount: BigNumber;
        };
        sender: string;
      }
    >;
  };

  estimateGas: {
    canEject(
      tokenId_: BigNumberish,
      order_: {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      },
      feeToken_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      tokenId_: BigNumberish,
      order_: {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    eject(
      tokenId_: BigNumberish,
      order_: {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hashById(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    nftPositions(overrides?: CallOverrides): Promise<BigNumber>;

    pokeMe(overrides?: CallOverrides): Promise<BigNumber>;

    schedule(
      orderParams_: {
        tokenId: BigNumberish;
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        feeToken: string;
        resolver: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    taskById(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    canEject(
      tokenId_: BigNumberish,
      order_: {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      },
      feeToken_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      tokenId_: BigNumberish,
      order_: {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    eject(
      tokenId_: BigNumberish,
      order_: {
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        owner: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hashById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftPositions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pokeMe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    schedule(
      orderParams_: {
        tokenId: BigNumberish;
        tickThreshold: BigNumberish;
        ejectAbove: boolean;
        ejectDust: boolean;
        amount0Min: BigNumberish;
        amount1Min: BigNumberish;
        receiver: string;
        feeToken: string;
        resolver: string;
        maxFeeAmount: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    taskById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
